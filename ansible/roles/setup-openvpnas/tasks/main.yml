---
- name: Create openvpn data directory
  file:
    path: "{{ xserver_data }}/x-servers-data/{{ item.name }}"
    state: directory
  with_items:
    - {name: 'openvpn-as'}
    - {name: 'openvpn-as/config'}
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Archive server files
  archive:
    path: /x-servers/openvpn-as
    dest: /tmp/openvpn-as.tgz
    format: gz
  delegate_to: 127.0.0.1
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Unarchive server files
  unarchive:
    src: /tmp/openvpn-as.tgz
    dest: "{{ xserver_root }}/x-servers/"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch non-root user id
  shell: "(id -u {{ xserver_host_non_root_user }})"
  register: user_id
  until: user_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch non-root group id
  shell: "(id -g {{ xserver_host_non_root_group }})"
  register: group_id
  until: group_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Copy openvpn start script
  template:
    src: start.sh
    dest: "{{ xserver_root }}/x-servers/openvpn-as/"
    mode: 0744
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Check root/rootless mode
  set_fact:
    ov_rootless: true
  when: xserver_rootless|bool or ov_rootless|bool

- name: Check force update
  set_fact:
    ov_force_update: true
  when: xserver_force_update|bool or ov_force_update|bool

# Rootful Mode
- name: Check image exists
  podman_image_info:
    name: "{{ xserver_openvpnas }}"
  become: true
  register: image_info
  ignore_errors: true
  when: not ov_rootless|bool

- name: Build image if not exists
  shell: "(cd {{ xserver_root }}/x-servers; ./build.sh \"{{ xserver_target_arch }}\" \"openvpn-as\")"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or ov_force_update|bool)

- name: Check container status
  containers.podman.podman_container_info:
    name: openvpn-as
  become: true
  register: container_status
  until: container_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: not ov_rootless|bool

- name: Stop & Remove Openvpn-AS Server
  containers.podman.podman_container:
    name: openvpn-as
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (not ov_rootless|bool and container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool)

- name: Stop & Remove Openvpn-AS Server
  containers.podman.podman_container:
    name: openvpn-as
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: not ov_rootless|bool

- name: Start Openvpn-AS Server
  shell: "(cd {{ xserver_root }}/x-servers/openvpn-as; ./start.sh)"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (not ov_rootless|bool and not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))

# Rootless Mode
- name: Check image exists
  podman_image_info:
    name: "{{ xserver_openvpnas }}"
  register: image_info
  ignore_errors: true
  when: ov_rootless|bool

- name: Build image if not exists
  shell: "(cd {{ xserver_root }}/x-servers; ./build.sh \"{{ xserver_target_arch }}\" \"openvpn-as\" \"rootless\")"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or ov_force_update|bool)

- name: Check container status
  containers.podman.podman_container_info:
    name: openvpn-as
  register: container_status
  until: container_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Stop & Remove Openvpn-AS Server
  containers.podman.podman_container:
    name: openvpn-as
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (ov_rootless|bool and container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool)

- name: Stop & Remove Openvpn-AS Server
  containers.podman.podman_container:
    name: openvpn-as
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Fetch podman non-root user id
  command: id -u
  register: podman_user_id
  until: user_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Fetch podman non-root group id
  command: id -g
  register: podman_group_id
  until: group_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Change data directory ownership
  file:
    path: "{{ xserver_data }}/x-servers-data/openvpn-as/config"
    owner: "{{ podman_user_id.stdout }}"
    group: "{{ podman_group_id.stdout }}"
    recurse: true
    state: directory
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Check container_use_devices status
  command: getsebool container_use_devices
  become: true
  register: sebool_status
  until: sebool_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: ov_rootless|bool

- name: Fail on sebool_status off
  fail:
    msg: "Rootless Openvpn needs \"container_use_devices\" to be enabled"
  when: 'sebool_status is not skipped and "off" in sebool_status.stdout'

- name: Start Openvpn-AS Server
  shell: "(cd {{ xserver_root }}/x-servers/openvpn-as; ./start.sh \"rootless\")"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (ov_rootless|bool and not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))
