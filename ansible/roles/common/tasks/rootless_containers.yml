---
- name: "Check {{ xserver_name }} image exists"
  podman_image_info:
    name: "{{ xserver_image }}"
  register: image_info
  ignore_errors: true

- name: "Build {{ xserver_name }} image"
  command:
    cmd: ./build.sh "{{ xserver_target_arch }}" "{{ xserver_name }}"
    chdir: "{{ xserver_root }}/x-servers"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or xs_force_update|bool)

- name: "Check {{ xserver_name }} container status"
  containers.podman.podman_container_info:
    name: "{{ xserver_name }}"
  register: container_status
  until: container_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Stop & Disable rootless {{ xserver_name }} restart service"
  systemd:
    name: "container-{{ xserver_name }}"
    state: stopped
    enabled: false
    scope: user
  register: service_status
  failed_when:
    - service_status.failed == true
    - '"Could not find the requested service" not in service_status.msg'
  until: service_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or (container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool))'

- name: "Remove {{ xserver_name }} restart service"
  file:
    path: "~/.config/systemd/user/container-{{ xserver_name }}.service"
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or (container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool))'

- name: "Reload systemd daemon"
  systemd:
    daemon_reload: true
    scope: user
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or (container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool))'

- name: "Stop & Remove rootless {{ xserver_name }} Server"
  containers.podman.podman_container:
    name: "{{ xserver_name }}"
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool)

- name: "Stop & Disable {{ xserver_name }} restart service"
  systemd:
    name: "container-{{ xserver_name }}"
    state: stopped
    enabled: false
  become: true
  register: service_status
  failed_when:
    - service_status.failed == true
    - '"Could not find the requested service" not in service_status.msg'
  until: service_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os'

- name: "Remove {{ xserver_name }} restart service"
  file:
    path: "/lib/systemd/system/container-{{ xserver_name }}.service"
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os'

- name: "Reload systemd daemon"
  systemd:
    daemon_reload: true
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os'

- name: "Stop & Remove rootful {{ xserver_name }} Server"
  containers.podman.podman_container:
    name: "{{ xserver_name }}"
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch podman non-root user id
  command: id -u
  register: podman_user_id
  until: podman_user_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch podman non-root group id
  command: id -g
  register: podman_group_id
  until: podman_group_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Change {{ xserver_name }} data directory ownership"
  file:
    path: "{{ xserver_data }}/x-servers-data/{{ xserver_name }}/config"
    owner: "{{ podman_user_id.stdout }}"
    group: "{{ podman_group_id.stdout }}"
    recurse: true
    state: directory
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Fetch selinux policy list"
  command: semodule -l
  become: true
  register: sepolicy_list
  until: sepolicy_list is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: xs_custom_policy is defined and not xs_force_update

- name: Apply custom selinux policy
  include: xs_custom_sepolicy.yml
  become: true
  when: xs_custom_policy is defined and (xs_force_update or xs_custom_policy not in sepolicy_list.stdout)

- name: "Start {{ xserver_name }} Server"
  command:
    cmd: ./start.sh
    chdir: "{{ xserver_root }}/x-servers/{{ xserver_name }}"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool)

- name: Create user systemd directory
  file:
    path: ~/.config/systemd/user
    state: directory
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))'

- name: "Create {{ xserver_name }} restart service"
  containers.podman.podman_generate_systemd:
    name: "{{ xserver_name }}"
    dest: ~/.config/systemd/user/
    restart_policy: "no-restart"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))'

- name: "Update {{ xserver_name }} restart service"
  lineinfile:
    path: "~/.config/systemd/user/container-{{ xserver_name }}.service"
    search_string: "{{ item.name }}"
    state: "absent"
  with_items:
    - {name: 'ExecStop='}
    - {name: 'ExecStopPost='}
    - {name: 'PIDFile='}
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))'

- name: "Enable {{ xserver_name }} restart service"
  systemd:
    name: "container-{{ xserver_name }}"
    enabled: true
    scope: user
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))'

- name: "Reload systemd daemon"
  systemd:
    daemon_reload: true
    scope: user
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: '"pios11" in xserver_os and (image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool))'
