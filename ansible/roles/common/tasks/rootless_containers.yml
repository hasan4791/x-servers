---
- name: "Check {{ xserver_name }} image exists"
  podman_image_info:
    name: "{{ xserver_image }}"
  register: image_info
  ignore_errors: true

- name: "Build {{ xserver_name }} image"
  command:
    cmd: ./build.sh "{{ xserver_target_arch }}" "{{ xserver_name }}"
    chdir: "{{ xserver_root }}/x-servers"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or xs_force_update|bool)

- name: "Check {{ xserver_name }} container status"
  containers.podman.podman_container_info:
    name: "{{ xserver_name }}"
  register: container_status
  until: container_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Stop & Remove rootless {{ xserver_name }} Server"
  containers.podman.podman_container:
    name: "{{ xserver_name }}"
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or (container_status.containers|length != 0 and not container_status.containers[0].State.Running|bool)

- name: "Stop & Remove rootful {{ xserver_name }} Server"
  containers.podman.podman_container:
    name: "{{ xserver_name }}"
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch podman non-root user id
  command: id -u
  register: podman_user_id
  until: user_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch podman non-root group id
  command: id -g
  register: podman_group_id
  until: group_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Change {{ xserver_name }} data directory ownership"
  file:
    path: "{{ xserver_data }}/x-servers-data/{{ xserver_name }}/config"
    owner: "{{ podman_user_id.stdout }}"
    group: "{{ podman_group_id.stdout }}"
    recurse: true
    state: directory
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: "Check {{ xs_custom_policy }} exists"
  command: semodule -l
  become: true
  register: sepolicy_list
  until: sepolicy_list is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: not xs_force_update

- name: Apply custom selinux policy
  include: xs_custom_sepolicy.yml
  become: true
  when: xs_force_update or (xs_custom_policy is defined and xs_custom_policy not in sepolicy_list.stdout)

- name: "Start {{ xserver_name }} Server"
  command:
    cmd: ./start.sh
    chdir: "{{ xserver_root }}/x-servers/{{ xserver_name }}"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or not (container_status.containers|length != 0 and container_status.containers[0].State.Running|bool)
