---
- name: Create wireguard data directory
  file:
    path: "{{ xserver_data }}/x-servers-data/{{ item.name }}"
    state: directory
  with_items:
    - {name: 'wireguard'}
    - {name: 'wireguard/config'}
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Archive server files
  archive:
    path: /x-servers/wireguard
    dest: /tmp/wireguard.tgz
    format: gz
  delegate_to: 127.0.0.1
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Unarchive server files
  unarchive:
    src: /tmp/wireguard.tgz
    dest: "{{ xserver_root }}/x-servers/"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch non-root user id
  shell: "(id -u {{ xserver_host_non_root_user }})"
  register: user_id
  until: user_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Fetch non-root group id
  shell: "(id -g {{ xserver_host_non_root_group }})"
  register: group_id
  until: group_id is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Copy wireguard start script
  template:
    src: start.sh
    dest: "{{ xserver_root }}/x-servers/wireguard/"
    mode: 0744
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"

- name: Check root/rootless mode
  set_fact:
    wg_rootless: true
  when: not xserver_rootless|bool or not wg_rootless|bool

- name: Check force update
  set_fact:
    wg_force_update: true
  when: xserver_force_update|bool or wg_force_update|bool

# Rootful Mode
- name: Check image exists
  podman_image_info:
    name: "{{ xserver_wireguard }}"
  become: true
  register: image_info
  ignore_errors: true
  when: not wg_rootless|bool

- name: Build image if not exists
  shell: "(cd {{ xserver_root }}/x-servers; ./build.sh \"{{ xserver_target_arch }}\" \"wireguard\")"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or wg_force_update|bool)

- name: Stop & Remove Wireguard Server
  containers.podman.podman_container:
    name: wireguard
    state: absent
  become: true
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or wg_rootless|bool

- name: Start Wireguard Server
  shell: "(cd {{ xserver_root }}/x-servers/wireguard; ./start.sh)"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped

# Rootless Mode
- name: Check image exists
  podman_image_info:
    name: "{{ xserver_wireguard }}"
  register: image_info
  ignore_errors: true
  when: wg_rootless|bool

- name: Build image if not exists
  shell: "(cd {{ xserver_root }}/x-servers; ./build.sh \"{{ xserver_target_arch }}\" \"wireguard\" \"rootless\")"
  register: image_build
  until: image_build is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_info is not skipped and (image_info.images|length == 0 or wg_force_update|bool)

- name: Stop & Remove Wireguard Server
  containers.podman.podman_container:
    name: wireguard
    state: absent
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped or not wg_rootless|bool

- name: Start Wireguard Server
  shell: "(cd {{ xserver_root }}/x-servers/wireguard; ./start.sh \"rootless\")"
  environment:
    XSERVER_DATA_PATH: "{{ xserver_data }}/x-servers-data"
  register: task_status
  until: task_status is successful
  retries: "{{ task_retries | int }}"
  delay: "{{ task_delay | int }}"
  when: image_build is not skipped
